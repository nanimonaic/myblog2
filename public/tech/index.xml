<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>技术 on nanimonai&#39;s Blog</title>
    <link>https://blog.nanimonai.org/tech/</link>
    <description>Recent content in 技术 on nanimonai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://blog.nanimonai.org/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>未Root情况下远程进行企业微信打卡或其他打卡操作的两种办法</title>
      <link>https://blog.nanimonai.org/posts/tech/%E6%9C%AAroot%E6%83%85%E5%86%B5%E4%B8%8B%E8%BF%9C%E7%A8%8B%E8%BF%9B%E8%A1%8C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%89%93%E5%8D%A1%E6%88%96%E5%85%B6%E4%BB%96%E6%89%93%E5%8D%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.nanimonai.org/posts/tech/%E6%9C%AAroot%E6%83%85%E5%86%B5%E4%B8%8B%E8%BF%9C%E7%A8%8B%E8%BF%9B%E8%A1%8C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%89%93%E5%8D%A1%E6%88%96%E5%85%B6%E4%BB%96%E6%89%93%E5%8D%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</guid>
      <description>为什么研究这个 缘由是学校的逆天管理制度，企业微信里面创建了一个企业要求所有大学生在21:30-23:00期间进行打卡操作。鉴于企业微信的位置获取不是一般的抽象，除了查看你的GPS信号外还有调用附近的基站进行定位（西瓜和Mike 语），最为逆天的是本人的移动设备是哄蒙系统，未Root，也就无法享用诸多先进科技带来的便利。
因此，第一种方法应运而生：
1.在手机上安装VMOS Pro，走虚拟机路线。其中的root和Xposed的模块安装均为傻瓜式操作，这里不过多赘述。BTW，虚拟安卓机在大学的另一大用途就是通过学习通考试。
2.安装应用变量，Fake location（fuck location不支持虚拟机的安卓版本我记得），而且我们需要的是具有基站模拟功能的位置模拟软件。在当前诈骗猖獗的情况下自建伪基站是不切实且无异于找死的。Fake location需要爆米，我记得7r/月
3.利用自带的Xposed Installer下载，激活应用变量，配置指定应用（如企业微信），其中比较重要的是你的安卓版本，IMEI和MEID这几个需要留意。如果你在之前的手机/母鸡上面打过卡了，这些就要原封不动的抄原来手机。反之则无所谓。
4.启动fake location。位置选择到位后启动模拟，同时启动基站模拟。DONE.
5.代价：7r/per month
PS：这种方法并非自创，而是由Mike和大西瓜研究而出。此法也有助于不同大学的上课打卡机制，上班族的上班打卡机制。以及Fake location的路线模拟，可以帮助有需要者进行跑步的模拟。（导入运动软件进行操作云云），这方面我不是第一个提出来的，网络上面很多大佬也讲过类似操作,本人这样帮过朋友，证明其可行性。就是画路线的时候别超出操场或者撞墙里面了，以免露馅。
好日子的结束 在一次美美不请假而出游的日子中，我意外发现第一种方法失效了。其具体表现为：地图识别我在A地（GPS），也就是打卡地，但是我的伪装被企业微信识破，即它能准确定位到我的真实所在地B地。而这个方案是在2023.12之前都有效的，且亲自实验过的。
后经诸多方案排查无果后，也由先前高人enadixxoOxox0指点采用第二种方法。
oo指出可以使用备用机装企业微信然后写自动脚本完成打卡，并且自己实验成功。
注意!虽然说用的是老旧的备用机。但是仍然要注意自己的安全，隐私等。Hamibot可以远程执行脚本，安全系数极低。它算一个云端控制，理论上讲服务器后退可以看我手机的内容甚至控制，所以并不推荐这个平台。里面虽然有日志，但是服务器是外人的。开发文档里面有扫描文件，截屏，OCR获取信息。理论上能获取你手机的任何操作单仅限于显示时候，锁屏没有密码脚本的话，也是开不起来的。如果真要使用也建议是暂时使用几次，不需要使用的时候推荐关闭无障碍。
鄙人的脚本跑在一个叫OpenAuto.js的开源软件上(跳转github)目前测试也是可行的，甚至优于Hamibot，因为其可以设置脚本的定时执行和循环执行，可以完成很多很多的其他操作而不用把这些内容加到脚本编写里面去。但还是要提供无障碍和一些权限，因此仍然建议找台备用机。
1.导入脚本
2.试运行 DONE.
脚本的编写可能是比较难搞定的一个步骤。但是也不难。
可以参考(https://github.com/hlsky1988/WeChatCheckingIn)，即使他是写Hamibot上的脚本的，可以参考借鉴思路。
以下是我的打卡脚本，也可以进行一个参考比较，主要是延迟的选定，然后看需不需要增加重新尝试模块，反正我是没写。
// 确保开启了Auto.js的无障碍服务 auto.waitFor(); // 唤醒并解锁设备（根据你的设备情况，这里需要自定义解锁逻辑） device.wakeUp(); let { height, width } = device let x = width / 2 let y1 = (height / 3) * 2 let y2 = height / 3 swipe(x, y1, x + 5, y2, 500) sleep(3000) toastLog(&amp;#39;启动企业微信,准备打卡&amp;#39;) // 启动企业微信 app.</description>
      <content:encoded><![CDATA[<h1 id="为什么研究这个">为什么研究这个</h1>
<p>  缘由是学校的逆天管理制度，企业微信里面创建了一个企业要求所有大学生在21:30-23:00期间进行打卡操作。鉴于企业微信的位置获取不是一般的抽象，除了查看你的GPS信号外还有调用附近的基站进行定位（西瓜和Mike 语），最为逆天的是本人的移动设备是哄蒙系统，未Root，也就无法享用诸多先进科技带来的便利。</p>
<p>  因此，第一种方法应运而生：</p>
<p>  1.在手机上安装VMOS Pro，走虚拟机路线。其中的root和Xposed的模块安装均为傻瓜式操作，这里不过多赘述。BTW，虚拟安卓机在大学的另一大用途就是通过学习通考试。</p>
<p>  2.安装应用变量，Fake location（fuck location不支持虚拟机的安卓版本我记得），而且我们需要的是具有基站模拟功能的位置模拟软件。在当前诈骗猖獗的情况下自建伪基站是不切实且无异于找死的。Fake location需要爆米，我记得7r/月</p>
<p>  3.利用自带的Xposed Installer下载，激活应用变量，配置指定应用（如企业微信），其中比较重要的是你的安卓版本，IMEI和MEID这几个需要留意。如果你在之前的手机/母鸡上面打过卡了，这些就要原封不动的抄原来手机。反之则无所谓。</p>
<p>  4.启动fake location。位置选择到位后启动模拟，同时启动基站模拟。DONE.</p>
<p>  5.代价：7r/per month</p>
<p>  PS：这种方法并非自创，而是由Mike和大西瓜研究而出。此法也有助于不同大学的上课打卡机制，上班族的上班打卡机制。以及Fake location的路线模拟，可以帮助有需要者进行跑步的模拟。（导入运动软件进行操作云云），这方面我不是第一个提出来的，网络上面很多大佬也讲过类似操作,本人这样帮过朋友，证明其可行性。就是画路线的时候别超出操场或者撞墙里面了，以免露馅。</p>
<h1 id="好日子的结束">好日子的结束</h1>
<p>  在一次美美不请假而出游的日子中，我意外发现第一种方法失效了。其具体表现为：地图识别我在A地（GPS），也就是打卡地，但是我的伪装被企业微信识破，即它能准确定位到我的真实所在地B地。而这个方案是在2023.12之前都有效的，且亲自实验过的。<br>
  后经诸多方案排查无果后，也由先前高人enadixxoOxox0指点采用第二种方法。</p>
<p>  oo指出可以使用备用机装企业微信然后写自动脚本完成打卡，并且自己实验成功。</p>
<p>  注意!虽然说用的是老旧的备用机。但是仍然要注意自己的安全，隐私等。Hamibot可以远程执行脚本，安全系数极低。它算一个云端控制，理论上讲服务器后退可以看我手机的内容甚至控制，所以并不推荐这个平台。里面虽然有日志，但是服务器是外人的。开发文档里面有扫描文件，截屏，OCR获取信息。理论上能获取你手机的任何操作单仅限于显示时候，锁屏没有密码脚本的话，也是开不起来的。如果真要使用也建议是暂时使用几次，不需要使用的时候推荐关闭无障碍。</p>
<p>  鄙人的脚本跑在一个叫OpenAuto.js的开源软件上<a href="https://github.com/openautojs/openautojs">(跳转github)</a>目前测试也是可行的，甚至优于Hamibot，因为其可以设置脚本的定时执行和循环执行，可以完成很多很多的其他操作而不用把这些内容加到脚本编写里面去。但还是要提供无障碍和一些权限，因此仍然建议找台备用机。</p>
<p>1.导入脚本</p>
<p>2.试运行 DONE.</p>
<p>  脚本的编写可能是比较难搞定的一个步骤。但是也不难。</p>
<p>  可以参考<a href="https://github.com/hlsky1988/WeChatCheckingIn">(https://github.com/hlsky1988/WeChatCheckingIn)</a>，即使他是写Hamibot上的脚本的，可以参考借鉴思路。</p>
<p>  以下是我的打卡脚本，也可以进行一个参考比较，主要是延迟的选定，然后看需不需要增加重新尝试模块，反正我是没写。</p>
<pre tabindex="0"><code>// 确保开启了Auto.js的无障碍服务
auto.waitFor();

// 唤醒并解锁设备（根据你的设备情况，这里需要自定义解锁逻辑）
device.wakeUp();
let { height, width } = device
let x = width / 2
let y1 = (height / 3) * 2
let y2 = height / 3
swipe(x, y1, x + 5, y2, 500)
sleep(3000)
toastLog(&#39;启动企业微信,准备打卡&#39;)


// 启动企业微信
app.launchPackage(&#34;com.tencent.wework&#34;);

// 等待企业微信启动
waitForPackage(&#34;com.tencent.wework&#34;, 5000);

// 等待界面加载的逻辑
sleep(3000);

// 导航到打卡页面的操作
click(&#34;工作台&#34;);
sleep(1000);
click(&#34;打卡&#34;);
sleep(1000);

// 执行打卡操作
click(&#34;上班打卡&#34;);
sleep(1000);

function signAction() {
    toastLog(&#39;signAction 开始执行&#39;)
    let signIn = text(&#39;上班打卡&#39;).findOne(1000)
    let signOut = text(&#39;下班打卡&#39;).findOne(1000)
    if (signIn) {
      let stepLeft = signIn.bounds().left + 10
      let stepTop = signIn.bounds().top + 10
      click(stepLeft, stepTop)
      check()
    } else if (signOut) {
      let stepLeft = signOut.bounds().left + 10
      let stepTop = signOut.bounds().top + 10
      click(stepLeft, stepTop)
      check()
    } else {
      toastLog(&#39;打卡未完成,正在检查打卡状态&#39;)
      check()
    }
  }

// 可以加上处理打卡后的逻辑，如发送打卡结果通知等，鄙人太懒和垃圾所以没写

// 结束脚本
exit();
</code></pre><p><strong>DONE.</strong></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
