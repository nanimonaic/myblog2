[{"content":" 我是一个爱打游戏的老人，偶尔假装自己在努力学习 本项目由 Hugo 生成 主题 Paper 由 adityatelange 开发\n","permalink":"https://blog.nanimonai.org/about/","summary":"我是一个爱打游戏的老人，偶尔假装自己在努力学习 本项目由 Hugo 生成 主题 Paper 由 adityatelange 开发","title":"关于"},{"content":" 现代的青年愈发得迷失了。我也一样。所谓沉默，沉默的大多数。所谓嘈杂。一位看客，或许会好过突如其来的死亡吧。害怕失去害怕未知，害怕自己会对现实抱有期望\n听起来好像可笑的很。在一个青春中畏手畏脚，不敢做出承诺，也不怎么负责任。几年后回头看看，那会是庆幸还是懊悔？老者们责备，嘲笑年轻人的爱情，认为其只是源于欣赏，源于心理上虚假的自我幻想。青年人却嘲讽老者的“迂”，自以为能为另一半负起责任，能够互相包容。\n好像都有些偏激。\n仔细省察下来，自己亦无资格评头论足，有时候很想写一本自传体小说（像《在路上》那样）写下虚妄且矛盾的青春。你此时的不如意又有多重要，又有多少意义呢？积累成的只有经验。呵！又是经验，世故的思想，不再的初心。\n一名茫然的探险者，是要深知真情流露之危险的。不妨带上一幅假笑的面具，默默收下“这个孩子/人性格真好/善良/听话”的类似夸耀。自己究竟是什么啊？我究竟又是怎样一个人？“面具戴得太久了，久而久之，就会粘在脸上，想要摘下来，除非伤筋动骨扒皮”\n朋友以异样之眼光审视我正进行之写作，好像见到了什么不可理喻的东西。这纯粹是我浪费时间吧，我们是高三啊。有时我也这么认为，但还是要写点什么。感受到的真正的悲伤，会源自心底，怎么会像分数的小挫折。所谓悲伤，是心中只能掩盖不能化开的吧\n所谓大苦难，所谓人生\n阅读摘录：亲戚或余悲，他人亦已歌。死去何所道，托体同山阿。\n中国人极善造神，造了再毁，毁了再造，乐此不疲。\n","permalink":"https://blog.nanimonai.org/posts/think/%E8%88%9E%E6%96%87%E5%BC%84%E5%A2%A8/","summary":"现代的青年愈发得迷失了。我也一样。所谓沉默，沉默的大多数。所谓嘈杂。一位看客，或许会好过突如其来的死亡吧。害怕失去害怕未知，害怕自己会对现实抱有期望\n听起来好像可笑的很。在一个青春中畏手畏脚，不敢做出承诺，也不怎么负责任。几年后回头看看，那会是庆幸还是懊悔？老者们责备，嘲笑年轻人的爱情，认为其只是源于欣赏，源于心理上虚假的自我幻想。青年人却嘲讽老者的“迂”，自以为能为另一半负起责任，能够互相包容。\n好像都有些偏激。\n仔细省察下来，自己亦无资格评头论足，有时候很想写一本自传体小说（像《在路上》那样）写下虚妄且矛盾的青春。你此时的不如意又有多重要，又有多少意义呢？积累成的只有经验。呵！又是经验，世故的思想，不再的初心。\n一名茫然的探险者，是要深知真情流露之危险的。不妨带上一幅假笑的面具，默默收下“这个孩子/人性格真好/善良/听话”的类似夸耀。自己究竟是什么啊？我究竟又是怎样一个人？“面具戴得太久了，久而久之，就会粘在脸上，想要摘下来，除非伤筋动骨扒皮”\n朋友以异样之眼光审视我正进行之写作，好像见到了什么不可理喻的东西。这纯粹是我浪费时间吧，我们是高三啊。有时我也这么认为，但还是要写点什么。感受到的真正的悲伤，会源自心底，怎么会像分数的小挫折。所谓悲伤，是心中只能掩盖不能化开的吧\n所谓大苦难，所谓人生\n阅读摘录：亲戚或余悲，他人亦已歌。死去何所道，托体同山阿。\n中国人极善造神，造了再毁，毁了再造，乐此不疲。","title":"舞文弄墨"},{"content":" 找回了我用于记录往事的笔记本，近来手头的书也都还没读完，就权且写一些旧东西吧。\n2023.5 思想总是跑在前面。他看得太远，比只能活在当下的身体还远得多。拿掉希望就是让思想重新回归身体，而且身体总有一天会腐烂。\n2023.10 \u0026hellip;\n我在散落的书堆间坐下，多少次反复关注父亲不安的的神态和言辞。那时候我又听到蝉鸣。那声音与前阵子所闻不同，已是寒蝉之鸣。我在夏天回到故乡，呆坐在沸腾似的蝉鸣之中，屡屡生出莫名的悲哀。我感觉我的哀愁总是同这蝉噪一起渗入心底。当此之时，我总是一动不动地独自凝视着自己。\n我的哀愁在今夏归省后逐渐变换了情调。正如蝉声从蝉鸣变成寒蝉一般，我觉得周遭之人的命运也仿佛在巨大的轮回中渐次变动\n\u0026hellip;\n———夏目漱石《心》\n回忆 我有写日记的习惯是初中伊始的，一位对我有非常大影响的语文老师建议我每天写一点文字，不管是记录或是描写，对写作是很有帮助的。\n我听从了，原先觉得写无可写，是一件挺烦人的事情。比起自己发牢骚，我更喜欢看别人发，也就是看书。不知怎的，书越看约多，人也越来越愚钝，想得东西也越来越多，脑子里充斥着声音。那就都写着吧。\n看得东西可能多了一点，自己也变得奇怪起来了，没有以前那种乐观与兴奋感了。感受最深刻的就是共鸣，我现实经历的事情在书中出现，或者是书中的事情投射到现实。震惊之余也只好长出一口气，鼓起勇气面对明天。\n神性的解放，人性的回归。\n","permalink":"https://blog.nanimonai.org/posts/think/%E7%89%A2%E9%AA%9A/","summary":"找回了我用于记录往事的笔记本，近来手头的书也都还没读完，就权且写一些旧东西吧。\n2023.5 思想总是跑在前面。他看得太远，比只能活在当下的身体还远得多。拿掉希望就是让思想重新回归身体，而且身体总有一天会腐烂。\n2023.10 \u0026hellip;\n我在散落的书堆间坐下，多少次反复关注父亲不安的的神态和言辞。那时候我又听到蝉鸣。那声音与前阵子所闻不同，已是寒蝉之鸣。我在夏天回到故乡，呆坐在沸腾似的蝉鸣之中，屡屡生出莫名的悲哀。我感觉我的哀愁总是同这蝉噪一起渗入心底。当此之时，我总是一动不动地独自凝视着自己。\n我的哀愁在今夏归省后逐渐变换了情调。正如蝉声从蝉鸣变成寒蝉一般，我觉得周遭之人的命运也仿佛在巨大的轮回中渐次变动\n\u0026hellip;\n———夏目漱石《心》\n回忆 我有写日记的习惯是初中伊始的，一位对我有非常大影响的语文老师建议我每天写一点文字，不管是记录或是描写，对写作是很有帮助的。\n我听从了，原先觉得写无可写，是一件挺烦人的事情。比起自己发牢骚，我更喜欢看别人发，也就是看书。不知怎的，书越看约多，人也越来越愚钝，想得东西也越来越多，脑子里充斥着声音。那就都写着吧。\n看得东西可能多了一点，自己也变得奇怪起来了，没有以前那种乐观与兴奋感了。感受最深刻的就是共鸣，我现实经历的事情在书中出现，或者是书中的事情投射到现实。震惊之余也只好长出一口气，鼓起勇气面对明天。\n神性的解放，人性的回归。","title":"牢骚"},{"content":"Hello,world!\n写下这些字时，我是一名迷茫的电脑小白，进入浩如烟海的赛博世界，越是走到深处越会觉得自己无知，觉得自己无从下手。\n先写些无用漂亮话吧：\n2023.7.20\n看到的，全是更悲惨的戏文，更绝望的独白，更无助的祈求，更冷漠的看客\n————《鲁镇社戏》 2023.8.21\n解构是一把双刃剑\n它能把所有顽固的糟粕变成乐子\n也能把一切崇高的理想化作虚无 ","permalink":"https://blog.nanimonai.org/posts/think/blog-test/","summary":"Hello,world!\n写下这些字时，我是一名迷茫的电脑小白，进入浩如烟海的赛博世界，越是走到深处越会觉得自己无知，觉得自己无从下手。\n先写些无用漂亮话吧：\n2023.7.20\n看到的，全是更悲惨的戏文，更绝望的独白，更无助的祈求，更冷漠的看客\n————《鲁镇社戏》 2023.8.21\n解构是一把双刃剑\n它能把所有顽固的糟粕变成乐子\n也能把一切崇高的理想化作虚无 ","title":"Blog Test"},{"content":" Ice Year Il n’y a pas de hasard, il n’y a que des rendez-vous. Yon Zilch 来自彼岸，归于虚无。浮华人生，黄粱一梦。 春风少年兄 你在世纪大道东门 milvoid Milvoid 什么也没有的主页 sdy_zjx 可爱的学姐捏 金毛犬 可爱的学妹捏 watermeko FPS高手 ","permalink":"https://blog.nanimonai.org/link/","summary":"link","title":"Link"},{"content":"为什么研究这个 缘由是学校的逆天管理制度，企业微信里面创建了一个企业要求所有大学生在21:30-23:00期间进行打卡操作。鉴于企业微信的位置获取不是一般的抽象，除了查看你的GPS信号外还有调用附近的基站进行定位（西瓜和Mike 语），最为逆天的是本人的移动设备是哄蒙系统，未Root，也就无法享用诸多先进科技带来的便利。\n因此，第一种方法应运而生：\n1.在手机上安装VMOS Pro，走虚拟机路线。其中的root和Xposed的模块安装均为傻瓜式操作，这里不过多赘述。BTW，虚拟安卓机在大学的另一大用途就是通过学习通考试。\n2.安装应用变量，Fake location（fuck location不支持虚拟机的安卓版本我记得），而且我们需要的是具有基站模拟功能的位置模拟软件。在当前诈骗猖獗的情况下自建伪基站是不切实且无异于找死的。Fake location需要爆米，我记得7r/月\n3.利用自带的Xposed Installer下载，激活应用变量，配置指定应用（如企业微信），其中比较重要的是你的安卓版本，IMEI和MEID这几个需要留意。如果你在之前的手机/母鸡上面打过卡了，这些就要原封不动的抄原来手机。反之则无所谓。\n4.启动fake location。位置选择到位后启动模拟，同时启动基站模拟。DONE.\n5.代价：7r/per month\nPS：这种方法并非自创，而是由Mike和大西瓜研究而出。此法也有助于不同大学的上课打卡机制，上班族的上班打卡机制。以及Fake location的路线模拟，可以帮助有需要者进行跑步的模拟。（导入运动软件进行操作云云），这方面我不是第一个提出来的，网络上面很多大佬也讲过类似操作,本人这样帮过朋友，证明其可行性。就是画路线的时候别超出操场或者撞墙里面了，以免露馅。\n好日子的结束 在一次美美不请假而出游的日子中，我意外发现第一种方法失效了。其具体表现为：地图识别我在A地（GPS），也就是打卡地，但是我的伪装被企业微信识破，即它能准确定位到我的真实所在地B地。而这个方案是在2023.12之前都有效的，且亲自实验过的。\n后经诸多方案排查无果后，也由先前高人enadixxoOxox0指点采用第二种方法。\noo指出可以使用备用机装企业微信然后写自动脚本完成打卡，并且自己实验成功。\n注意!虽然说用的是老旧的备用机。但是仍然要注意自己的安全，隐私等。Hamibot可以远程执行脚本，安全系数极低。它算一个云端控制，理论上讲服务器后退可以看我手机的内容甚至控制，所以并不推荐这个平台。里面虽然有日志，但是服务器是外人的。开发文档里面有扫描文件，截屏，OCR获取信息。理论上能获取你手机的任何操作单仅限于显示时候，锁屏没有密码脚本的话，也是开不起来的。如果真要使用也建议是暂时使用几次，不需要使用的时候推荐关闭无障碍。\n鄙人的脚本跑在一个叫OpenAuto.js的开源软件上(跳转github)目前测试也是可行的，甚至优于Hamibot，因为其可以设置脚本的定时执行和循环执行，可以完成很多很多的其他操作而不用把这些内容加到脚本编写里面去。但还是要提供无障碍和一些权限，因此仍然建议找台备用机。\n1.导入脚本\n2.试运行 DONE.\n脚本的编写可能是比较难搞定的一个步骤。但是也不难。\n可以参考(https://github.com/hlsky1988/WeChatCheckingIn)，即使他是写Hamibot上的脚本的，可以参考借鉴思路。\n以下是我的打卡脚本，也可以进行一个参考比较，主要是延迟的选定，然后看需不需要增加重新尝试模块，反正我是没写。\n// 确保开启了Auto.js的无障碍服务 auto.waitFor(); // 唤醒并解锁设备（根据你的设备情况，这里需要自定义解锁逻辑） device.wakeUp(); let { height, width } = device let x = width / 2 let y1 = (height / 3) * 2 let y2 = height / 3 swipe(x, y1, x + 5, y2, 500) sleep(3000) toastLog(\u0026#39;启动企业微信,准备打卡\u0026#39;) // 启动企业微信 app.launchPackage(\u0026#34;com.tencent.wework\u0026#34;); // 等待企业微信启动 waitForPackage(\u0026#34;com.tencent.wework\u0026#34;, 5000); // 等待界面加载的逻辑 sleep(3000); // 导航到打卡页面的操作 click(\u0026#34;工作台\u0026#34;); sleep(1000); click(\u0026#34;打卡\u0026#34;); sleep(1000); // 执行打卡操作 click(\u0026#34;上班打卡\u0026#34;); sleep(1000); function signAction() { toastLog(\u0026#39;signAction 开始执行\u0026#39;) let signIn = text(\u0026#39;上班打卡\u0026#39;).findOne(1000) let signOut = text(\u0026#39;下班打卡\u0026#39;).findOne(1000) if (signIn) { let stepLeft = signIn.bounds().left + 10 let stepTop = signIn.bounds().top + 10 click(stepLeft, stepTop) check() } else if (signOut) { let stepLeft = signOut.bounds().left + 10 let stepTop = signOut.bounds().top + 10 click(stepLeft, stepTop) check() } else { toastLog(\u0026#39;打卡未完成,正在检查打卡状态\u0026#39;) check() } } // 可以加上处理打卡后的逻辑，如发送打卡结果通知等，鄙人太懒和垃圾所以没写 // 结束脚本 exit(); DONE.\n","permalink":"https://blog.nanimonai.org/posts/tech/%E6%9C%AAroot%E6%83%85%E5%86%B5%E4%B8%8B%E8%BF%9C%E7%A8%8B%E8%BF%9B%E8%A1%8C%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%89%93%E5%8D%A1%E6%88%96%E5%85%B6%E4%BB%96%E6%89%93%E5%8D%A1%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/","summary":"为什么研究这个 缘由是学校的逆天管理制度，企业微信里面创建了一个企业要求所有大学生在21:30-23:00期间进行打卡操作。鉴于企业微信的位置获取不是一般的抽象，除了查看你的GPS信号外还有调用附近的基站进行定位（西瓜和Mike 语），最为逆天的是本人的移动设备是哄蒙系统，未Root，也就无法享用诸多先进科技带来的便利。\n因此，第一种方法应运而生：\n1.在手机上安装VMOS Pro，走虚拟机路线。其中的root和Xposed的模块安装均为傻瓜式操作，这里不过多赘述。BTW，虚拟安卓机在大学的另一大用途就是通过学习通考试。\n2.安装应用变量，Fake location（fuck location不支持虚拟机的安卓版本我记得），而且我们需要的是具有基站模拟功能的位置模拟软件。在当前诈骗猖獗的情况下自建伪基站是不切实且无异于找死的。Fake location需要爆米，我记得7r/月\n3.利用自带的Xposed Installer下载，激活应用变量，配置指定应用（如企业微信），其中比较重要的是你的安卓版本，IMEI和MEID这几个需要留意。如果你在之前的手机/母鸡上面打过卡了，这些就要原封不动的抄原来手机。反之则无所谓。\n4.启动fake location。位置选择到位后启动模拟，同时启动基站模拟。DONE.\n5.代价：7r/per month\nPS：这种方法并非自创，而是由Mike和大西瓜研究而出。此法也有助于不同大学的上课打卡机制，上班族的上班打卡机制。以及Fake location的路线模拟，可以帮助有需要者进行跑步的模拟。（导入运动软件进行操作云云），这方面我不是第一个提出来的，网络上面很多大佬也讲过类似操作,本人这样帮过朋友，证明其可行性。就是画路线的时候别超出操场或者撞墙里面了，以免露馅。\n好日子的结束 在一次美美不请假而出游的日子中，我意外发现第一种方法失效了。其具体表现为：地图识别我在A地（GPS），也就是打卡地，但是我的伪装被企业微信识破，即它能准确定位到我的真实所在地B地。而这个方案是在2023.12之前都有效的，且亲自实验过的。\n后经诸多方案排查无果后，也由先前高人enadixxoOxox0指点采用第二种方法。\noo指出可以使用备用机装企业微信然后写自动脚本完成打卡，并且自己实验成功。\n注意!虽然说用的是老旧的备用机。但是仍然要注意自己的安全，隐私等。Hamibot可以远程执行脚本，安全系数极低。它算一个云端控制，理论上讲服务器后退可以看我手机的内容甚至控制，所以并不推荐这个平台。里面虽然有日志，但是服务器是外人的。开发文档里面有扫描文件，截屏，OCR获取信息。理论上能获取你手机的任何操作单仅限于显示时候，锁屏没有密码脚本的话，也是开不起来的。如果真要使用也建议是暂时使用几次，不需要使用的时候推荐关闭无障碍。\n鄙人的脚本跑在一个叫OpenAuto.js的开源软件上(跳转github)目前测试也是可行的，甚至优于Hamibot，因为其可以设置脚本的定时执行和循环执行，可以完成很多很多的其他操作而不用把这些内容加到脚本编写里面去。但还是要提供无障碍和一些权限，因此仍然建议找台备用机。\n1.导入脚本\n2.试运行 DONE.\n脚本的编写可能是比较难搞定的一个步骤。但是也不难。\n可以参考(https://github.com/hlsky1988/WeChatCheckingIn)，即使他是写Hamibot上的脚本的，可以参考借鉴思路。\n以下是我的打卡脚本，也可以进行一个参考比较，主要是延迟的选定，然后看需不需要增加重新尝试模块，反正我是没写。\n// 确保开启了Auto.js的无障碍服务 auto.waitFor(); // 唤醒并解锁设备（根据你的设备情况，这里需要自定义解锁逻辑） device.wakeUp(); let { height, width } = device let x = width / 2 let y1 = (height / 3) * 2 let y2 = height / 3 swipe(x, y1, x + 5, y2, 500) sleep(3000) toastLog(\u0026#39;启动企业微信,准备打卡\u0026#39;) // 启动企业微信 app.","title":"未Root情况下远程进行企业微信打卡或其他打卡操作的两种办法"}]